//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Blend.SampleData.AccountsSampleDataSource
{
    using System; 
    using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
    internal class AccountsSampleDataSource { }
#else

    public class AccountsSampleDataSource : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        public AccountsSampleDataSource()
        {
            try
            {
                Uri resourceUri = new Uri("ms-appx:/SampleData/AccountsSampleDataSource/AccountsSampleDataSource.xaml", UriKind.RelativeOrAbsolute);
                Windows.UI.Xaml.Application.LoadComponent(this, resourceUri);
            }
            catch
            {
            }
        }

        private Accounts _Accounts = new Accounts();

        public Accounts Accounts
        {
            get
            {
                return this._Accounts;
            }
        }
    }

    public class BillsItem : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private Items _Items = new Items();

        public Items Items
        {
            get
            {
                return this._Items;
            }
        }

        private string _Time_created = string.Empty;

        public string Time_created
        {
            get
            {
                return this._Time_created;
            }

            set
            {
                if (this._Time_created != value)
                {
                    this._Time_created = value;
                    this.OnPropertyChanged("Time_created");
                }
            }
        }

        private string _Custom_name = string.Empty;

        public string Custom_name
        {
            get
            {
                return this._Custom_name;
            }

            set
            {
                if (this._Custom_name != value)
                {
                    this._Custom_name = value;
                    this.OnPropertyChanged("Custom_name");
                }
            }
        }

        private string _Date_created = string.Empty;

        public string Date_created
        {
            get
            {
                return this._Date_created;
            }

            set
            {
                if (this._Date_created != value)
                {
                    this._Date_created = value;
                    this.OnPropertyChanged("Date_created");
                }
            }
        }
    }

    public class AccountsItem : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private Bills _Bills = new Bills();

        public Bills Bills
        {
            get
            {
                return this._Bills;
            }
        }

        private string _Username = string.Empty;

        public string Username
        {
            get
            {
                return this._Username;
            }

            set
            {
                if (this._Username != value)
                {
                    this._Username = value;
                    this.OnPropertyChanged("Username");
                }
            }
        }
    }

    public class Accounts : System.Collections.ObjectModel.ObservableCollection<AccountsItem>
    { 
    }

    public class Bills : System.Collections.ObjectModel.ObservableCollection<BillsItem>
    { 
    }

    public class ItemsItem : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private Drink _Drink = new Drink();

        public Drink Drink
        {
            get
            {
                return this._Drink;
            }

            set
            {
                if (this._Drink != value)
                {
                    this._Drink = value;
                    this.OnPropertyChanged("Drink");
                }
            }
        }

        private string _Time_added = string.Empty;

        public string Time_added
        {
            get
            {
                return this._Time_added;
            }

            set
            {
                if (this._Time_added != value)
                {
                    this._Time_added = value;
                    this.OnPropertyChanged("Time_added");
                }
            }
        }

        private string _Date_added = string.Empty;

        public string Date_added
        {
            get
            {
                return this._Date_added;
            }

            set
            {
                if (this._Date_added != value)
                {
                    this._Date_added = value;
                    this.OnPropertyChanged("Date_added");
                }
            }
        }
    }

    public class Items : System.Collections.ObjectModel.ObservableCollection<ItemsItem>
    { 
    }

    public class Drink : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private string _Name = string.Empty;

        public string Name
        {
            get
            {
                return this._Name;
            }

            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        private double _Volume = 0;

        public double Volume
        {
            get
            {
                return this._Volume;
            }

            set
            {
                if (this._Volume != value)
                {
                    this._Volume = value;
                    this.OnPropertyChanged("Volume");
                }
            }
        }

        private double _ABV = 0;

        public double ABV
        {
            get
            {
                return this._ABV;
            }

            set
            {
                if (this._ABV != value)
                {
                    this._ABV = value;
                    this.OnPropertyChanged("ABV");
                }
            }
        }

        private string _Price = string.Empty;

        public string Price
        {
            get
            {
                return this._Price;
            }

            set
            {
                if (this._Price != value)
                {
                    this._Price = value;
                    this.OnPropertyChanged("Price");
                }
            }
        }
    }
#endif
}
